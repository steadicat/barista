#!/usr/bin/env ruby
require 'rubygems'
require 'fssm'
require 'yui/compressor'

puts ">>> Watching for changes\n    Do CTRL+C to end"

$haml_source_dir = 'static'
$css_source = 'static/styles/master.sass'
$css_master = 'static/styles/master.css'
$js_source = 'static/scripts/main.js'
$js_master = 'static/scripts/master.js'

def build(relative)
  ext = File.extname(relative).downcase
  return unless ['.sass', '.js', '.haml'].include? ext
  return if relative.end_with?($js_master)

  puts "\n>>> Building the #{ext} again for #{File.basename(relative)}"

  case ext
  when '.sass'
    # Compile & minify the CSS with compass
    system "compass compile static $css_source"

  when '.js'
    # Merge files with sprockets
    system "sprocketize $js_source > $js_master.tmp"

    # Minify
    f = File.new(js_master, 'w')
    f.write( YUI::JavaScriptCompressor.new.compress(File.open("$js_master.tmp").read) )
    f.close

    # Cleanup
    system "rm $js_master.tmp"

  when '.haml'
    dirname = File.dirname(relative)
    basename = File.basename(relative)
    basename_sans_ext = File.basename(relative, File.extname(relative))
    puts dirname + '/' + basename_sans_ext

    # Regenerate whichever HAML file just triggered the call
    system "cd #{dirname} && haml -f html5 #{basename} > #{basename_sans_ext}.html.tmp && mv #{basename_sans_ext}.html.tmp #{basename_sans_ext}.html"
  end

  puts '    ... Done.'
end


FSSM.monitor("#{File.dirname(__FILE__)}/", '**/*') do
  update {|base, relative| build(relative)}
  create {|base, relative| build(relative)}
  delete {|base, relative| build(relative)}
end
